load.csv(".../data/otal_watt.csv")
read.csv(".../data/otal_watt.csv")
read.csv("../data/otal_watt.csv")
read.csv("./data/otal_watt.csv")
read.csv(".../data/otal_watt.csv")
read.csv("..../data/otal_watt.csv")
read.csv("...../data/otal_watt.csv")
read.csv(".../data/total_watt.csv")
read.csv("../data/total_watt.csv")
read.csv("..../data/total_watt.csv")
read.csv("./data/total_watt.csv")
read.csv("...../data/total_watt.csv")
read.csv("....../data/total_watt.csv")
read.csv("../../data/total_watt.csv")
data = read.csv("../../data/total_watt.csv")
plot(data)
help(plot)
plot(data, type = "l")
quartz()
plot(data, type = "l")
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
plot(data, type = "l")
help(plot)
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
plot(data, type = "l", main = "Visualisation", sub = "1 min", xlab = "Time", ylab = "watt")
plot(data, type = "b", main = "Visualisation", sub = "1 min", xlab = "Time", ylab = "watt")
plot(data, type = "b", main = "1 min Visualisation", col = "red", xlab = "Time", ylab = "watt")
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
plot(data, type = "l", main = "1 min Visualisation", col = "red", xlab = "Time", ylab = "watt")
View(data)
watt = data[,2]
fix(watt)
watt = data[,2]
minute = data[,1]
xyplot(watt ~ minute | day, data = Sums, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
library(lattice)
library(plyr)
xyplot(watt ~ minute | day, data = Sums, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ minute | day, data, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ minute , data, type = "l")
xyplot(watt ~ minute , data, type = "l")
xyplot(watt ~ minute, type = "l")
help(xyplot)
fix(minute)
watt = data[,2]
minute = data[,1]
Data  <- data.frame(minute = minute, watt = watt)
getsum  <- function(Df) c(watt = sum(Df$watt))
Sums <- ddply(Data, .(minute), getsum)
Sums$hour <- cut(Sums$minute, breaks = "30 min")
Sums$day <- cut(Sums$minute, breaks = "day")
watt <- data$V1
minute <- as.POSIXct(data$V2, origin = "1970-01-01", tz="GMT")
Data  <- data.frame(minute = minute, watt = watt)
getsum  <- function(Df) c(watt = sum(Df$watt))
Sums <- ddply(Data, .(minute), getsum)
Sums$hour <- cut(Sums$minute, breaks = "30 min")
Sums$day <- cut(Sums$minute, breaks = "day")
xyplot(watt ~ minute, type = "l")
fix(minute)
View(data)
data = read.csv("../../data/total_watt.csv", header =F)
watt <- data$V1
minute <- as.POSIXct(data$V2, origin = "1970-01-01", tz="GMT")
fix(minute)
Data  <- data.frame(minute = minute, watt = watt)
getsum  <- function(Df) c(watt = sum(Df$watt))
Sums <- ddply(Data, .(minute), getsum)
Sums$hour <- cut(Sums$minute, breaks = "30 min")
Sums$day <- cut(Sums$minute, breaks = "day")
xyplot(watt ~ minute, type = "l")
xyplot(watt ~ minute | day, data = Sums, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
library(lattice)
library(plyr)
data = read.csv("../../data/total_watt.csv", sep="," , header =F)
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
plot(data, type = "l", main = "1 min Visualisation", col = "red", xlab = "Time", ylab = "Watt")
plot(data, type = "l", main = "1 min Visualisation", col = "red", xlab = "Time", ylab = "Watt")
watt <- data$V1
minute <- as.POSIXct(data$V2, origin = "1970-01-01", tz="GMT")
Data  <- data.frame(minute = minute, watt = watt)
getsum  <- function(Df) c(watt = sum(Df$watt))
Sums <- ddply(Data, .(minute), getsum)
Sums$hour <- cut(Sums$minute, breaks = "30 min")
View(Sums)
View(Data)
fix(getsum)
Sums <- ddply(Data, .(minute), getsum)
View(data)
data = read.table("../../data/total_watt.csv", sep="," , header =F)
minute <- as.POSIXct(data$V1, origin = "1970-01-01", tz="GMT")
watt <- data$V2
Data  <- data.frame(minute = minute, watt = watt)
getsum  <- function(Df) c(watt = sum(Df$watt))
Sums <- ddply(Data, .(minute), getsum)
Sums$hour <- cut(Sums$minute, breaks = "30 min")
Sums$day <- cut(Sums$minute, breaks = "day")
xyplot(watt ~ minute, type = "l")
### 1. visualization of the data-set as values per 30mins  ###
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
xyplot(watt ~ minute | 30min, data = Sums, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
### 2. visualization of the data-set as values per 1 day  ###
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
xyplot(watt ~ minute | day, data = Sums, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
Sums <- ddply(Data, .(minute), getsum)
Sums$day <- cut(Sums$minute, breaks = "day")
### 1. visualization of the data-set as values per 30mins  ###
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
xyplot(watt ~ minute, data = Sums, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
xyplot(watt ~ minute | day, data = Sums, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ minute | day, data = Sums, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
help(xyplot)
xyplot(watt ~ minute | day, data = Sums, type = "l",
as.table = TRUE, layout = c(5, 3),
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ minute | day, data = Sums, type = "l",
as.table = TRUE, layout = c(7,),
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ minute | day, data = Sums, type = "l",
as.table = TRUE, layout = c(7,5),
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ minute | day, data = Sums, type = "l",
as.table = TRUE, layout = c(7,),
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ minute | day, data = Sums, type = "l",
as.table = TRUE, layout = c(7,7),
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ minute | day, data = Sums, type = "l",
as.table = TRUE, layout = c(7,3),
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ minute | day, data = Sums, type = "l",
as.table = TRUE, layout = c(7,5),
scales = list(x = list(relation = "free", rot = 90)))
help(kmeans)
km <- kmeans(data, 3, iter.max = 10, nstart=1)
km <- kmeans(data, 3, iter.max = 10, nstart=1)
result <- km$cluste
km <- kmeans(data, 3) ##, iter.max = 10, nstart=1)
km <- kmeans(data, 3) ##, iter.max = 10, nstart=1)
km <- kmeans(Data, 3) ##, iter.max = 10, nstart=1)
km <- kmeans(Data, 3, iter.max = 10, nstart=1)
x <- iris[,1:4]
km <- kmeans(x,3)
result <- km$cluste
result
km
head(x)
km
head(Data)
km <-kmeans(Data,3)
x
Data
km <- kmeans(watt, 3, iter.max = 10, nstart=1)
result <- km$cluste
result
head(result)
summary(result)
km <- kmeans(watt, 3, iter.max = 10, nstart=1)
result <- km$cluster
Sums$cluster <-result
Sums$cluster
library(fpc)
plotcluster(Data, km$cluster)
library(cluster)
library(fpc)
plotcluster(Data, km$cluster)
install.packages("fpc")
library(cluster)
library(fpc)
plotcluster(Data, km$cluster)
plotcluster(watt, km$cluster)
xyplot(watt ~ minute | day, data = Sums, type = "h",
as.table = TRUE, layout = c(7,5),
scales = list(x = list(relation = "free", rot = 90)))
daySums <- ddply(Data, .(day), getsum)
Sums$week <- cut(Sums$minute, breaks = "week")
daySums <- ddply(Data, .(day), getsum)
Sums$day <- cut(Sums$minute, breaks = "day")
Sums$week <- cut(Sums$minute, breaks = "week")
daySums <- ddply(Data, .(day), getsum)
head(Sums)
head(Data)
daySums <- ddply(Sums, .(day), getsum)
daySums$week <- cut(Sums$minute, breaks = "week")
daySums <- ddply(Sums, .(day), getsum)
daySums$week <- cut(Sums$day, breaks = "week")
daySums$week <- cut(daySums$day, breaks = "week")
daySums$week <- cut(as.Data(daySums$day), breaks = "week")
help(as.Date)
daySums$week <- cut(as.Date(daySums$day), breaks = "week")
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
xyplot(watt ~ minute | week, data = daySums, type = "h",
as.table = TRUE, layout = c(7,5),
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ minute | week, data = daySums, type = "h",
as.table = TRUE, layout = c(2,5),
scales = list(x = list(relation = "free", rot = 90)))
head(daySums)
xyplot(watt ~ day | week, data = daySums, type = "h",
as.table = TRUE, layout = c(2,5),
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ day | week, data = daySums, type = "l",
as.table = TRUE, layout = c(2,5),
scales = list(x = list(relation = "free", rot = 90)))
xyplot(watt ~ day | week, data = daySums, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
km <- kmeans(daySums, 3, iter.max = 10, nstart=1)
xyplot(watt ~ day | week, data = daySums, type = "h",
scales = list(x = list(relation = "free", rot = 90)))
km <- kmeans(daySums$watt, 3, iter.max = 10, nstart=1)
result <- km$cluster
daySums$cluster <-result
head(daySums)
daySums
library(cluster)
library(fpc)
plotcluster(daySums$watt, km$cluster)
install.packages("ggplot2")
library(ggplot2)
help(ggplot)
daySums
gglot(daySums)
ggplot(daySums)
help(ggplot)
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = PR_Cat, fill= PR_Cat), position = 'stack')
p + geom_area(aes(colour = PR_Cat, fill= cluster), position = 'stack')
p + geom_area(aes(colour = cluster, fill= cluster), position = 'stack')
# gglot Area chart
library(ggplot2)
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = cluster, fill= cluster), position = 'stack')
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = cluster, fill= cluster), position = 'stack',
scales = list(x = list(relation = "free", rot = 90)))
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = cluster, fill= cluster), position = 'stack')
library(cluster)
library(fpc)
plotcluster(daySums$watt, km$cluster)
x = nrow(daySums$cluster)
x
daySums$cluster
nrow(daySums$cluster)
nrow(daySums)
x = nrow(daySums)
x
daySums$cluster(2)
daySums$cluster(1,2)
daySums$cluster(,2)
daySums$cluster[2]
daySums$category <- for(i in 1:x){
if(daySums$cluster == 1){
daySums$category == "Low"
}
else if(daySUms$cluser ==2){
daySums$category == "Medium"
}
else{
daySums$category == "High"
}
}
head(daySums)
x = nrow(daySums)
daySums$category <- for(i in 1:x){
if(daySums$cluster == 1){
daySums$category == "Low"
}
else if(daySUms$cluser ==2){
daySums$category == "Medium"
}
else{
daySums$category == "High"
}
}
head(daySums)
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = cluster, fill= cluster), position = 'stack')
library(cluster)
library(fpc)
plotcluster(daySums$watt, km$cluster)
x
daySums$category[i] <- for(i in 1:x){
if(daySums$cluster == 1){
daySums$category == "Low"
}
else if(daySUms$cluser ==2){
daySums$category == "Medium"
}
else{
daySums$category == "High"
}
}
head(daySums)
for(i in 1:x){
if(daySums$cluster == 1){
daySums$category[i] = "Low"
}
else if(daySUms$cluser ==2){
daySums$category[i] = "Medium"
}
else{
daySums$category[i] = "High"
}
}
head(daySums)
for(i in 1:x){
if(daySums$cluster[i] == 1){
daySums$category[i] = "Low"
}
else if(daySUms$cluser[i] == 2){
daySums$category[i] = "Medium"
}
else{
daySums$category[i] = "High"
}
}
for(i in 1:x){
if(daySums$cluster[i] == 1){
daySums$category[i] = "Low"
}
else if(daySums$cluser[i] == 2){
daySums$category[i] = "Medium"
}
else{
daySums$category[i] = "High"
}
}
for(i in 1:x){
if(as.Numeric(daySums$cluster[i]) == 1){
daySums$category[i] = "Low"
}
else if(as.Numeric(daySums$cluster[i]) == 2){
daySums$category[i] = "Medium"
}
else{
daySums$category[i] = "High"
}
}
for(i in 1:x){
if(as.numeric(daySums$cluster[i]) == 1){
daySums$category[i] = "Low"
}
else if(as.numeric(daySums$cluster[i]) == 2){
daySums$category[i] = "Medium"
}
else{
daySums$category[i] = "High"
}
}
head(daySums)
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = cluster, fill= cluster), position = 'stack')
p <- ggplot(daySums, aes( day, watt))
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = category, fill= category), position = 'stack')
for(i in 1:x){
if(as.numeric(daySums$cluster[i]) == 1){
daySums$category[i] = "Low"
}
else if(as.numeric(daySums$cluster[i]) == 3){
daySums$category[i] = "High"
}
else{
daySums$category[i] = "Medium"
}
}
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = category, fill= category), position = 'stack')
help(geom_area)
help(ggplot)
p
ggplot(daySums, aes( day, watt))
head(diamonds)
qplot(day, data = daySums, geom = "histogram", fill = category)
help(qplot)
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = category, fill= category), position = 'stack')
p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = category, fill= category), position = 'stack')
p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = category, fill= category), position = 'stack')
p + opts(axis.text.x=theme_text(angle=90, hjust=1))
p <- ggplot(daySums, aes( day, watt))
p
p + geom_area(aes(colour = category, fill= category), position = 'stack')
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = category, fill= category), position = 'stack') + opts(axis.text.x=theme_text(angle=90, hjust=1))
head(diamonds)
ggplot(daySums, aes(day, fill = category)) + geom_bar()
library(lattice)
library(plyr)
data = read.table("../../data/total_watt.csv", sep="," , header =F)
minute <- as.POSIXct(data$V1, origin = "1970-01-01", tz="GMT")
watt <- data$V2
Data  <- data.frame(minute = minute, watt = watt)
getsum  <- function(Df) c(watt = sum(Df$watt))
Sums <- ddply(Data, .(minute), getsum)
Sums$day <- cut(Sums$minute, breaks = "day")
Sums$week <- cut(Sums$minute, breaks = "week")
### 1. visualization of the data-set as values per 30mins  ###
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
xyplot(watt ~ minute | day, data = Sums, type = "l",
as.table = TRUE, layout = c(7,5),
scales = list(x = list(relation = "free", rot = 90)))
### 2. visualization of the data-set as values per 1 day  ###
daySums <- ddply(Sums, .(day), getsum)
daySums$week <- cut(as.Date(daySums$day), breaks = "week")
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
xyplot(watt ~ day | week, data = daySums, type = "l",
scales = list(x = list(relation = "free", rot = 90)))
### 3. visualization of the data-set as clusters  ###
km <- kmeans(daySums$watt, 3, iter.max = 10, nstart=1)
result <- km$cluster
daySums$cluster <-result
# Centroid Plot against 1st 2 discriminant functions
library(cluster)
library(fpc)
plotcluster(daySums$watt, km$cluster)
# gglot Area chart
library(ggplot2)
x = nrow(daySums)
for(i in 1:x){
if(as.numeric(daySums$cluster[i]) == 1){
daySums$category[i] = "Low"
}
else if(as.numeric(daySums$cluster[i]) == 3){
daySums$category[i] = "Medium"
}
else{
daySums$category[i] = "High"
}
}
if (Sys.info()['sysname'] == "Darwin") { ## Open new window
quartz()
}
p <- ggplot(daySums, aes( day, watt))
p + geom_area(aes(colour = category, fill= category), position = 'stack') + opts(axis.text.x=theme_text(angle=90, hjust=1))
install.packages("knitr")
